// type PairBool
// Contains 2 Booleans inside it
type PairBool { 
  new(fst: Bool, snd: Bool)
}

// Returns the first element of a pair
//fst(pair: PairBool): Bool
//    case pair {
//        new: pair.fst
//    }

//ex2:_
//fst(PairBool.new(Bool.false, Bool.true))

// Returns the second element of a pair
//snd(pair: PairBool): Bool
//    case pair {
//        new: pair.snd
//    }

//ex2:_
//snd(PairBool.new(Bool.false, Bool.true))

// Returns true if both elements of a PairBool are identical
//eql_elements(a: PairBool): Bool
//    case a {
//        new: case a.fst a.snd {
//            false false: true
//            false true: false
//            true false: false
//            true true: true
//        }
//    }
//ex2:_
//eql_elements(PairBool.new(Bool.false, Bool.false))

// Returns true if both Pairs are equal
// eql(PairBool.new(false, false), PairBool.new(true, true)) -> true 
// eql(PairBool.new(true, false), PairBool.new(true, false)) -> false
eql(a: PairBool, b: PairBool): Bool
    case a b {
        new: case a.fst b.fst {
            
        }

ex2:_
eql(PairBool.new(Bool.false, Bool.true))

// Returns true if both Pairs are different
// not_eql(PairBool.new(false, false), PairBool.new(true, true)) -> true 
// not_eql(PairBool.new(true, false), PairBool.new(true, false)) -> false
not_eql(a: PairBool, b: PairBool): Bool
  ?f
  
// Creates a PairBool from 2 Booleans
create(a: Bool, b: Bool): PairBool
  ?e

// Inverts the values of a PairBool
// neg(PairBool.new(false, false)) -> PairBool.new(true, true)
// neg(PairBool.new(false, true)) -> PairBool.new(true, false)
neg(pair: PairBool): PairBool
  ?n

// Inverts the 2 elements of a PairBool
swap(pair: PairBool): PairBool 
  ?s

ex_02: IO<Unit>
  IO {
    Tests._02.fst(fst)
    Tests._02.snd(snd)
    Tests._02.eql_elements(eql_elements)
    Tests._02.eql(eql)
    Tests._02.not_eql(not_eql)
    Tests._02.create(create)
    Tests._02.neg(neg)
    Tests._02.swap(swap)
  }
