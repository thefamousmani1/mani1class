// Advanced exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

type Maybe <A: Type> {
  none
  some(value: A)
}

// Returns pairs of the elements of the 2 input lists on the same index
// Ex: zip!!([1,2], ["a","b","c"]) == [{1, "a"}, {2 , "b"}]
// Ex: zip!!(["a", "b"], [3, 5])   == [{"a", 3}, {2 , "b"}]
zip<A: Type, B: Type>(xs: List<A>, ys: List<B>): List<Pair<A,B>>
  ?a

// Returns the smallest element of a List
smallest(xs: List<Nat>): Maybe<Nat>
  ?s

// Returns the same list without the smallest element
delete_smallest(xs: List<Nat>): List<Nat>
  ?d

// Returns the same list, in ascending order
sort_ascending(xs: List<Nat>): List<Nat>
  ?a

// Returns an element at an index from the list
// if there is an element at that index
//   returns Maybe.some!(element)
// else
//   returns Maybe.none!
get<A: Type>(idx: Nat, xs: List<A>): Maybe<A>
  ?g

// Removes all elements that does not match a condition
// List.filter<Nat>(Nat.odd, [1, 2, 3, 4, 5]) = [1, 3, 5]
filter<A: Type>(f: A -> Bool, xs: List<A>): List<A>
  ?f
  
