// Advanced exercises involving recursion

type Nat {
  zero
  succ(pred: Nat)
}

// Doubles a number
dbl(a: Nat): Nat
    case a {
        zero: Nat.zero
        succ: Nat.succ(Nat.succ(dbl(a.pred)))
    }

//5*2 = 2 + (2*(5-1))
//2*a = 2*((a-1)+1) -> 

//natural:_
//dbl(Nat.succ(Nat.succ(Nat.zero)))

add(a: Nat, b: Nat): Nat
  case a {
    zero: b
    succ: case b {
      zero: a 
      succ: add(a.pred, Nat.succ(b))
  }
}

mul(a: Nat, b: Nat): Nat
  case a {
    zero: Nat.zero
    succ: add(b, mul(a.pred, b))
  }

  // add(3, 3) = 6 

//a * b = 4 + ((6-1)*4)

//add(3, 0)
//mul(0, 3)
//mul(1, 3)

// 3*3 = 9
// 3*3 = 3+3+3
// 3*5 = 3+3+3+3+3


sub(a: Nat, b: Nat): Nat
  case a {
    zero: b
    succ: case b {
      zero: a
      succ: sub(a.pred, Nat.pred(b))
    }
  }




natural:_
sub(8, 3)


// Factorial
// 4! = 24
fac(a: Nat): Nat 
  
  ?f

// Equal
eql(a: Nat, b: Nat): Bool // Given 2 numbers, it returns true if the 2 are the same and false if they are different.
  
  ?e 

// Do not use the "not" function to create the functions below

// Greater than
// 2 > 1 = True
// 3 > 3 = False
gtn(a: Nat, b: Nat): Bool // if A > B == True else false
  
  ?g

// Lower than
// 1 < 2 = True
// 3 < 3 = False
ltn(a: Nat, b: Nat): Bool // if A > B == False else true 
  
  ?l

// Minimum
// min(2, 3) = 2
// min(4, 1) = 1
min(a: Nat, b: Nat): Nat // if A < B then A else B
  
  ?m2

// Maximum
// max(2, 3) = 3
// max(4, 1) = 4
max(a: Nat, b: Nat): Nat // if A > B then A else B
  
  ?m3


// Divides a number by two
// 2 / 2 = 1
// 5 / 2 = 2
// 1 / 2 = 0
hlf(a: Nat): Nat
  ?h

// Division
// 1 / 2 = 0
// x / 0 = 0
// 5 / 2 = 2
div(a: Nat, b: Nat): Nat // division
  
  ?d


ex_04: IO<Unit>
  IO {
    Tests._04.dbl(dbl)
    Tests._04.add(add)
    Tests._04.mul(mul)
    Tests._04.sub(sub)
    Tests._04.fac(fac)
    Tests._04.eql(eql)
    Tests._04.gtn(gtn)
    Tests._04.ltn(ltn)
    Tests._04.min(min)
    Tests._04.max(max)
    Tests._04.hlf(hlf)
    Tests._04.div(div)
  }