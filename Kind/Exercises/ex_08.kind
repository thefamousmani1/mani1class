// Basic exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

// Returns the list without the first element
tail<A: Type>(xs: List<A>): List<A>
    case xs {
        nil: List.nil<A>
        cons: xs.tail
    }

// aula2:_
// let lista = [1,2,3,4,5,6,7]
// List.show<Nat>(Nat.show, tail<Nat>(lista))


// Returns the head of the List
head<A: Type>(xs: List<A>): Maybe<A>
    case xs {
        nil: Maybe.none<A>
        cons: Maybe.some<A>(xs.head)
    }

// aula2:_
// let lista = [1,2,3,4,5,6,7]
// Maybe.show<Nat>(Nat.show, head<Nat>(lista))
// head!(lista)

// Returns the length of a list
length<A: Type>(xs: List<A>): Nat
  case xs {
      nil: Nat.zero
      cons: Nat.succ(length<A>(xs.tail))
  }

// ex8:_
// let lista = [1,2,3,4,5,6,7,8]
// length!(lista)

// Returns the last element of a list
last<A: Type>(xs: List<A>): Maybe<A>
  case xs {
      nil: Maybe.none<A>
      cons: case xs.tail {
          nil: Maybe.some<A>(xs.head)
          cons: last<A>(xs.tail)
      }
  }

// ex8:_
// let lista = [1,2,3,4,5,6,7,9]
// last!(lista)

// Returns the list without the last element
init<A: Type>(xs: List<A>): List<A>
  case xs {
      nil: List.nil<A>
      cons: case xs.tail {
          nil: List.nil<A>
          cons: List.cons<A>(xs.head, init<A>(xs.tail))
      }
  }

// ex8:_
// let lista = [1,2,3,4,5,6,7]
// List.show<Nat>(Nat.show, init!(lista))

// Concatenates two lists
concat<A: Type>(xs: List<A>, ys: List<A>): List<A>
    case xs {
        nil: ys
        cons: List.cons<A>(xs.head, concat!(xs.tail, ys))
    }

// ex8:_
// let listaa = [1,2,3]
// let listab = [4,5,6,7]
// List.show<Nat>(Nat.show, concat!(listaa, listab))

// Removes n elements from the start of the list
// List.drop<Nat>(3, [1,2,3,4,5]) -> [4, 5]
drop<A: Type>(n: Nat, xs: List<A>): List<A>
  case xs {
      nil: List.nil<A>
      cons: case n {
          zero: xs
          succ: drop<A>(n.pred, xs.tail)
      }
  }

// ex8:_
// let lista = [1,2,3,4,5,6,7]
// List.show<Nat>(Nat.show, drop<Nat>(4, lista))

// Creates a new list with the N first elements of the previous list
// List.take<Nat>(3, [1,2,3,4,5]) -> [1,2,3]
take<A: Type>(n: Nat, xs: List<A>): List<A>
  case xs {
      nil: List.nil<A>
      cons: case n {
          zero: xs
          succ: take<A>(n.pred, init<A>(xs))
      }
  }

ex8:_
let lista = [1,2,3,4,5,6,7]
List.show<Nat>(Nat.show, take<Nat>(4, lista))

// Applies a function to all elements of a list
map<A: Type, B: Type>(fn: A -> B, xs: List<A>): List<B>
  ?a

// Returns the same list, with the order reversed
reverse<A: Type>(xs: List<A>): List<A>
  reverse.go<A>(List.nil<A>, xs)

reverse.go<A: Type>(new_list: List<A>, old_list: List<A>): List<A>
  ?r
